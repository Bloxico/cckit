// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debug/debug_state.proto

package debug

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// State key prefix
type Prefix struct {
	// parts of key
	Key                  []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Prefix) Reset()         { *m = Prefix{} }
func (m *Prefix) String() string { return proto.CompactTextString(m) }
func (*Prefix) ProtoMessage()    {}
func (*Prefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9b4cfc46547f90, []int{0}
}

func (m *Prefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Prefix.Unmarshal(m, b)
}
func (m *Prefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Prefix.Marshal(b, m, deterministic)
}
func (m *Prefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prefix.Merge(m, src)
}
func (m *Prefix) XXX_Size() int {
	return xxx_messageInfo_Prefix.Size(m)
}
func (m *Prefix) XXX_DiscardUnknown() {
	xxx_messageInfo_Prefix.DiscardUnknown(m)
}

var xxx_messageInfo_Prefix proto.InternalMessageInfo

func (m *Prefix) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

type Prefixes struct {
	Prefixes             []*Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Prefixes) Reset()         { *m = Prefixes{} }
func (m *Prefixes) String() string { return proto.CompactTextString(m) }
func (*Prefixes) ProtoMessage()    {}
func (*Prefixes) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9b4cfc46547f90, []int{1}
}

func (m *Prefixes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Prefixes.Unmarshal(m, b)
}
func (m *Prefixes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Prefixes.Marshal(b, m, deterministic)
}
func (m *Prefixes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prefixes.Merge(m, src)
}
func (m *Prefixes) XXX_Size() int {
	return xxx_messageInfo_Prefixes.Size(m)
}
func (m *Prefixes) XXX_DiscardUnknown() {
	xxx_messageInfo_Prefixes.DiscardUnknown(m)
}

var xxx_messageInfo_Prefixes proto.InternalMessageInfo

func (m *Prefixes) GetPrefixes() []*Prefix {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// State key prefix match count
type PrefixesMatchCount struct {
	Matches              map[string]uint32 `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PrefixesMatchCount) Reset()         { *m = PrefixesMatchCount{} }
func (m *PrefixesMatchCount) String() string { return proto.CompactTextString(m) }
func (*PrefixesMatchCount) ProtoMessage()    {}
func (*PrefixesMatchCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9b4cfc46547f90, []int{2}
}

func (m *PrefixesMatchCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixesMatchCount.Unmarshal(m, b)
}
func (m *PrefixesMatchCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixesMatchCount.Marshal(b, m, deterministic)
}
func (m *PrefixesMatchCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixesMatchCount.Merge(m, src)
}
func (m *PrefixesMatchCount) XXX_Size() int {
	return xxx_messageInfo_PrefixesMatchCount.Size(m)
}
func (m *PrefixesMatchCount) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixesMatchCount.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixesMatchCount proto.InternalMessageInfo

func (m *PrefixesMatchCount) GetMatches() map[string]uint32 {
	if m != nil {
		return m.Matches
	}
	return nil
}

// State keys
type CompositeKeys struct {
	Keys                 []*CompositeKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CompositeKeys) Reset()         { *m = CompositeKeys{} }
func (m *CompositeKeys) String() string { return proto.CompactTextString(m) }
func (*CompositeKeys) ProtoMessage()    {}
func (*CompositeKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9b4cfc46547f90, []int{3}
}

func (m *CompositeKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompositeKeys.Unmarshal(m, b)
}
func (m *CompositeKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompositeKeys.Marshal(b, m, deterministic)
}
func (m *CompositeKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompositeKeys.Merge(m, src)
}
func (m *CompositeKeys) XXX_Size() int {
	return xxx_messageInfo_CompositeKeys.Size(m)
}
func (m *CompositeKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_CompositeKeys.DiscardUnknown(m)
}

var xxx_messageInfo_CompositeKeys proto.InternalMessageInfo

func (m *CompositeKeys) GetKeys() []*CompositeKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

// State key
type CompositeKey struct {
	Key                  []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompositeKey) Reset()         { *m = CompositeKey{} }
func (m *CompositeKey) String() string { return proto.CompactTextString(m) }
func (*CompositeKey) ProtoMessage()    {}
func (*CompositeKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9b4cfc46547f90, []int{4}
}

func (m *CompositeKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompositeKey.Unmarshal(m, b)
}
func (m *CompositeKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompositeKey.Marshal(b, m, deterministic)
}
func (m *CompositeKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompositeKey.Merge(m, src)
}
func (m *CompositeKey) XXX_Size() int {
	return xxx_messageInfo_CompositeKey.Size(m)
}
func (m *CompositeKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CompositeKey.DiscardUnknown(m)
}

var xxx_messageInfo_CompositeKey proto.InternalMessageInfo

func (m *CompositeKey) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

// State value
type Value struct {
	Key                  []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Json                 string   `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9b4cfc46547f90, []int{5}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func init() {
	proto.RegisterType((*Prefix)(nil), "cckit.extension.debug.Prefix")
	proto.RegisterType((*Prefixes)(nil), "cckit.extension.debug.Prefixes")
	proto.RegisterType((*PrefixesMatchCount)(nil), "cckit.extension.debug.PrefixesMatchCount")
	proto.RegisterMapType((map[string]uint32)(nil), "cckit.extension.debug.PrefixesMatchCount.MatchesEntry")
	proto.RegisterType((*CompositeKeys)(nil), "cckit.extension.debug.CompositeKeys")
	proto.RegisterType((*CompositeKey)(nil), "cckit.extension.debug.CompositeKey")
	proto.RegisterType((*Value)(nil), "cckit.extension.debug.Value")
}

func init() {
	proto.RegisterFile("debug/debug_state.proto", fileDescriptor_4f9b4cfc46547f90)
}

var fileDescriptor_4f9b4cfc46547f90 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x65, 0x93, 0x34, 0xa6, 0x37, 0xa9, 0x98, 0xb1, 0xd2, 0xb8, 0x56, 0x0c, 0xab, 0x0f, 0xb5,
	0xe2, 0x0e, 0x54, 0xb0, 0x9a, 0x47, 0xd3, 0xa2, 0x20, 0x85, 0x10, 0x41, 0xd0, 0x17, 0x99, 0x5d,
	0x6f, 0x92, 0x75, 0x37, 0x33, 0x6b, 0x66, 0x56, 0xba, 0x88, 0x2f, 0xfe, 0x82, 0x7e, 0x81, 0xbf,
	0xe4, 0x2f, 0xf8, 0x21, 0xb2, 0x77, 0x36, 0x31, 0xc5, 0x36, 0xcd, 0x43, 0x5f, 0xc2, 0x9d, 0xdc,
	0x7b, 0xce, 0xb9, 0xe7, 0xec, 0x30, 0xb0, 0xf3, 0x11, 0x83, 0x6c, 0xcc, 0xe9, 0xf7, 0x83, 0x36,
	0xc2, 0xa0, 0x9f, 0xce, 0x94, 0x51, 0xec, 0x56, 0x18, 0xc6, 0x91, 0xf1, 0xf1, 0xd4, 0xa0, 0xd4,
	0x91, 0x92, 0x3e, 0x8d, 0xb8, 0xbb, 0x63, 0xa5, 0xc6, 0x09, 0x72, 0x91, 0x46, 0x5c, 0x48, 0xa9,
	0x8c, 0x30, 0x91, 0x92, 0xda, 0x82, 0xdc, 0x3b, 0x65, 0x97, 0x4e, 0x41, 0x36, 0xe2, 0x38, 0x4d,
	0x4d, 0x6e, 0x9b, 0x9e, 0x0b, 0xf5, 0xc1, 0x0c, 0x47, 0xd1, 0x29, 0xbb, 0x01, 0xd5, 0x18, 0xf3,
	0x8e, 0xd3, 0xad, 0xee, 0x6d, 0x0e, 0x8b, 0xd2, 0x3b, 0x86, 0x86, 0xed, 0xa1, 0x66, 0xcf, 0xa1,
	0x91, 0x96, 0x35, 0x8d, 0x34, 0x0f, 0xee, 0xfa, 0xe7, 0x2e, 0xe3, 0x5b, 0xc8, 0x70, 0x31, 0xee,
	0xfd, 0x72, 0x80, 0xcd, 0x79, 0x4e, 0x84, 0x09, 0x27, 0x7d, 0x95, 0x49, 0xc3, 0x06, 0x70, 0x6d,
	0x5a, 0x9c, 0x16, 0x84, 0x4f, 0x57, 0x12, 0x2e, 0x63, 0xfd, 0x13, 0x0b, 0x3c, 0x96, 0x66, 0x96,
	0x0f, 0xe7, 0x34, 0x6e, 0x0f, 0x5a, 0xcb, 0x8d, 0x7f, 0x8e, 0x9c, 0xd2, 0x11, 0xdb, 0x86, 0x8d,
	0x2f, 0x22, 0xc9, 0xb0, 0x53, 0xe9, 0x3a, 0x7b, 0x5b, 0x43, 0x7b, 0xe8, 0x55, 0x9e, 0x39, 0xde,
	0x2b, 0xd8, 0xea, 0xab, 0x69, 0xaa, 0x74, 0x64, 0xf0, 0x35, 0xe6, 0x9a, 0x1d, 0x42, 0x2d, 0xc6,
	0x7c, 0xbe, 0xdb, 0xfd, 0x0b, 0x76, 0x5b, 0xc6, 0x0c, 0x09, 0xe0, 0x75, 0xa1, 0xb5, 0xfc, 0xef,
	0x39, 0xb9, 0xf6, 0x61, 0xe3, 0x6d, 0x21, 0xfc, 0x7f, 0xeb, 0xec, 0x82, 0xad, 0x72, 0x41, 0xc6,
	0xa0, 0xf6, 0x49, 0x2b, 0xd9, 0xa9, 0x92, 0x13, 0xaa, 0x0f, 0x7e, 0xd6, 0x00, 0x8e, 0x8a, 0x1d,
	0xde, 0x14, 0xf7, 0x83, 0x7d, 0x06, 0xa0, 0xa2, 0x9f, 0xa0, 0x90, 0xec, 0xde, 0x25, 0x51, 0xba,
	0x0f, 0xd7, 0xce, 0xda, 0xdb, 0xf9, 0xfe, 0xfb, 0xcf, 0x8f, 0x4a, 0xdb, 0x6d, 0x71, 0xba, 0x89,
	0x3c, 0x4c, 0x50, 0xcc, 0x7a, 0xce, 0x3e, 0x8b, 0x61, 0x93, 0x24, 0x29, 0xae, 0xd5, 0xb7, 0xc1,
	0x7d, 0xb0, 0x46, 0x7e, 0xda, 0xbb, 0x4d, 0x52, 0x37, 0x59, 0xbb, 0x94, 0x2a, 0xf2, 0xe4, 0x5f,
	0x63, 0xcc, 0xbf, 0xb1, 0x10, 0x1a, 0x24, 0xf6, 0x12, 0x0d, 0x5b, 0xe7, 0x63, 0xb8, 0xbb, 0x17,
	0x0c, 0x51, 0xf2, 0xde, 0x36, 0x29, 0x5d, 0x67, 0x73, 0x53, 0x56, 0xe4, 0x5d, 0x29, 0x32, 0xc8,
	0x0c, 0x5b, 0x89, 0xbf, 0x84, 0xbd, 0x4d, 0xec, 0x4d, 0xb7, 0x6e, 0xd9, 0x8b, 0xb0, 0x46, 0xd0,
	0x24, 0xea, 0x23, 0x4c, 0xd0, 0xe0, 0x15, 0x5a, 0xd8, 0x3f, 0x63, 0xe1, 0xc5, 0xe3, 0xf7, 0x8f,
	0xc6, 0x91, 0x99, 0x64, 0x81, 0x1f, 0xaa, 0x29, 0xd7, 0x87, 0x06, 0xc3, 0x49, 0x22, 0x02, 0x4e,
	0x4c, 0x7c, 0xc1, 0xa4, 0xed, 0xe3, 0x12, 0xd4, 0xe9, 0x15, 0x78, 0xf2, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xb2, 0xe5, 0x3d, 0x10, 0x72, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugStateClient is the client API for DebugState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugStateClient interface {
	// Clear all state or, if prefixes are defined, only prefix matched
	StateClean(ctx context.Context, in *Prefixes, opts ...grpc.CallOption) (*PrefixesMatchCount, error)
	// Get keys list, returns all keys or, if prefixes are defined, only prefix matched
	StateKeys(ctx context.Context, in *Prefix, opts ...grpc.CallOption) (*CompositeKeys, error)
	// Get state value by key
	StateGet(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error)
	// Put state value
	StatePut(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Value, error)
	// Delete state value
	StateDelete(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error)
}

type debugStateClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugStateClient(cc grpc.ClientConnInterface) DebugStateClient {
	return &debugStateClient{cc}
}

func (c *debugStateClient) StateClean(ctx context.Context, in *Prefixes, opts ...grpc.CallOption) (*PrefixesMatchCount, error) {
	out := new(PrefixesMatchCount)
	err := c.cc.Invoke(ctx, "/cckit.extension.debug.DebugState/StateClean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateClient) StateKeys(ctx context.Context, in *Prefix, opts ...grpc.CallOption) (*CompositeKeys, error) {
	out := new(CompositeKeys)
	err := c.cc.Invoke(ctx, "/cckit.extension.debug.DebugState/StateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateClient) StateGet(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/cckit.extension.debug.DebugState/StateGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateClient) StatePut(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/cckit.extension.debug.DebugState/StatePut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateClient) StateDelete(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/cckit.extension.debug.DebugState/StateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugStateServer is the server API for DebugState service.
type DebugStateServer interface {
	// Clear all state or, if prefixes are defined, only prefix matched
	StateClean(context.Context, *Prefixes) (*PrefixesMatchCount, error)
	// Get keys list, returns all keys or, if prefixes are defined, only prefix matched
	StateKeys(context.Context, *Prefix) (*CompositeKeys, error)
	// Get state value by key
	StateGet(context.Context, *CompositeKey) (*Value, error)
	// Put state value
	StatePut(context.Context, *Value) (*Value, error)
	// Delete state value
	StateDelete(context.Context, *CompositeKey) (*Value, error)
}

// UnimplementedDebugStateServer can be embedded to have forward compatible implementations.
type UnimplementedDebugStateServer struct {
}

func (*UnimplementedDebugStateServer) StateClean(ctx context.Context, req *Prefixes) (*PrefixesMatchCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateClean not implemented")
}
func (*UnimplementedDebugStateServer) StateKeys(ctx context.Context, req *Prefix) (*CompositeKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateKeys not implemented")
}
func (*UnimplementedDebugStateServer) StateGet(ctx context.Context, req *CompositeKey) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateGet not implemented")
}
func (*UnimplementedDebugStateServer) StatePut(ctx context.Context, req *Value) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatePut not implemented")
}
func (*UnimplementedDebugStateServer) StateDelete(ctx context.Context, req *CompositeKey) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDelete not implemented")
}

func RegisterDebugStateServer(s *grpc.Server, srv DebugStateServer) {
	s.RegisterService(&_DebugState_serviceDesc, srv)
}

func _DebugState_StateClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prefixes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServer).StateClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.extension.debug.DebugState/StateClean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServer).StateClean(ctx, req.(*Prefixes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugState_StateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServer).StateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.extension.debug.DebugState/StateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServer).StateKeys(ctx, req.(*Prefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugState_StateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServer).StateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.extension.debug.DebugState/StateGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServer).StateGet(ctx, req.(*CompositeKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugState_StatePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServer).StatePut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.extension.debug.DebugState/StatePut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServer).StatePut(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugState_StateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServer).StateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.extension.debug.DebugState/StateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServer).StateDelete(ctx, req.(*CompositeKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cckit.extension.debug.DebugState",
	HandlerType: (*DebugStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StateClean",
			Handler:    _DebugState_StateClean_Handler,
		},
		{
			MethodName: "StateKeys",
			Handler:    _DebugState_StateKeys_Handler,
		},
		{
			MethodName: "StateGet",
			Handler:    _DebugState_StateGet_Handler,
		},
		{
			MethodName: "StatePut",
			Handler:    _DebugState_StatePut_Handler,
		},
		{
			MethodName: "StateDelete",
			Handler:    _DebugState_StateDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug/debug_state.proto",
}
