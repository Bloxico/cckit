package testing

import (
	"fmt"
	"math/rand"
	"time"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/msp"
	pmsp "github.com/hyperledger/fabric/protos/msp"
	"github.com/hyperledger/fabric/protos/peer"
	"github.com/pkg/errors"
	"github.com/s7techlab/cckit/convert"
	"github.com/s7techlab/cckit/identity"
)

var (
	// ErrChaincodeNotExists occurs when attempting to invoke a nonexostent external chaincode
	ErrChaincodeNotExists = errors.New(`chaincode not exists`)
	// ErrUnknownFromArgsType  occurs when attempting to set unknown args in From func
	ErrUnknownFromArgsType = errors.New(`unknown args type to cckit.MockStub.From func`)
)

// MockStub replacement of shim.MockStub with creator mocking facilities
type MockStub struct {
	shim.MockStub
	cc                      shim.Chaincode
	mockCreator             []byte
	ClearCreatorAfterInvoke bool
	_args                   [][]byte
	InvokablesFull          map[string]*MockStub
	creatorTransformer      CreatorTransformer
	ChaincodeEvent          *peer.ChaincodeEvent
}

type CreatorTransformer func(...interface{}) (mspID string, certPEM []byte, err error)

// NewMockStub creates MockStub
func NewMockStub(name string, cc shim.Chaincode) *MockStub {
	return &MockStub{
		MockStub: *shim.NewMockStub(name, cc),
		cc:       cc,
		ClearCreatorAfterInvoke: true, // by default clear tx creator data after each cc method invoke
		InvokablesFull:          make(map[string]*MockStub),
	}
}

// GetArgs mocked args
func (stub *MockStub) GetArgs() [][]byte {
	return stub._args
}

// SetArgs set mocked args
func (stub *MockStub) SetArgs(args [][]byte) {
	stub._args = args
}

func (stub *MockStub) SetEvent(name string, payload []byte) error {
	if name == "" {
		return errors.New("event name can not be nil string")
	}
	stub.ChaincodeEvent = &peer.ChaincodeEvent{EventName: name, Payload: payload}
	return nil
}

// GetStringArgs get mocked args as strings
func (stub *MockStub) GetStringArgs() []string {
	args := stub.GetArgs()
	strargs := make([]string, 0, len(args))
	for _, barg := range args {
		strargs = append(strargs, string(barg))
	}
	return strargs
}

// MockPeerChaincode link to another MockStub
func (stub *MockStub) MockPeerChaincode(invokableChaincodeName string, otherStub *MockStub) {
	stub.InvokablesFull[invokableChaincodeName] = otherStub
}

// InvokeChaincode using another MockStub
func (stub *MockStub) InvokeChaincode(chaincodeName string, args [][]byte, channel string) peer.Response {

	// TODO "args" here should possibly be a serialized pb.ChaincodeInput
	// Internally we use chaincode name as a composite name
	if channel != "" {
		chaincodeName = chaincodeName + "/" + channel
	}

	otherStub, exists := stub.InvokablesFull[chaincodeName]
	if !exists {
		return shim.Error(ErrChaincodeNotExists.Error())
	}

	res := otherStub.MockInvoke(stub.TxID, args)
	return res
}

// GetFunctionAndParameters mocked
func (stub *MockStub) GetFunctionAndParameters() (function string, params []string) {
	allargs := stub.GetStringArgs()
	function = ""
	params = []string{}
	if len(allargs) >= 1 {
		function = allargs[0]
		params = allargs[1:]
	}
	return
}

// RegisterCreatorTransformer  that transforms creator data to MSP_ID and X.509 certificate
func (stub *MockStub) RegisterCreatorTransformer(creatorTransformer CreatorTransformer) *MockStub {
	stub.creatorTransformer = creatorTransformer
	return stub
}

// MockCreator of tx
func (stub *MockStub) MockCreator(mspID string, certPEM []byte) {
	stub.mockCreator, _ = msp.NewSerializedIdentity(mspID, certPEM)
}

func (stub *MockStub) generateTxUID() string {
	id := make([]byte, 32)
	rand.Seed(time.Now().UnixNano())
	rand.Read(id)
	return fmt.Sprintf("0x%x", id)
}

// Init func of chaincode - sugared version with autogenerated tx uuid
func (stub *MockStub) Init(iargs ...interface{}) peer.Response {
	args, err := convert.ArgsToBytes(iargs...)
	if err != nil {
		return shim.Error(err.Error())
	}

	return stub.MockInit(stub.generateTxUID(), args)
}

// MockInit mocked init function
func (stub *MockStub) MockInit(uuid string, args [][]byte) peer.Response {

	//default method name
	//if len(args) == 0 || string(args[0]) != "Init" {
	//	args = append([][]byte{[]byte("Init")}, args...)
	//}

	stub.SetArgs(args)
	stub.MockTransactionStart(uuid)
	res := stub.cc.Init(stub)
	stub.MockTransactionEnd(uuid)

	if stub.ClearCreatorAfterInvoke {
		stub.mockCreator = nil
	}

	return res
}

// MockInvoke  mocket init function
func (stub *MockStub) MockInvoke(uuid string, args [][]byte) peer.Response {
	// this is a hack here to set MockStub.args, because its not accessible otherwise
	stub.SetArgs(args)

	//empty event
	stub.ChaincodeEvent = nil

	// now do the invoke with the correct stub
	stub.MockTransactionStart(uuid)
	res := stub.cc.Invoke(stub)
	stub.MockTransactionEnd(uuid)

	if stub.ClearCreatorAfterInvoke {
		stub.mockCreator = nil
	}

	return res
}

// Invoke sugared invoke function with autogenerated tx uuid
func (stub *MockStub) Invoke(funcName string, iargs ...interface{}) peer.Response {
	fargs, err := convert.ArgsToBytes(iargs...)
	if err != nil {
		return shim.Error(err.Error())
	}
	args := append([][]byte{[]byte(funcName)}, fargs...)
	return stub.MockInvoke(stub.generateTxUID(), args)
}

// GetCreator mocked
func (stub *MockStub) GetCreator() ([]byte, error) {
	return stub.mockCreator, nil
}

// From tx creator mock
func (stub *MockStub) From(txCreator ...interface{}) *MockStub {

	var mspID string
	var certPEM []byte
	var err error

	if stub.creatorTransformer != nil {
		mspID, certPEM, err = stub.creatorTransformer(txCreator...)
	} else {
		mspID, certPEM, err = TransformCreator(txCreator...)
	}

	if err != nil {
		panic(err)
	}
	stub.MockCreator(mspID, certPEM)
	return stub
}

func TransformCreator(txCreator ...interface{}) (mspID string, certPEM []byte, err error) {
	if len(txCreator) == 1 {
		p := txCreator[0]
		switch p.(type) {

		case identity.CertIdentity:
			return p.(identity.CertIdentity).MspID, p.(identity.CertIdentity).GetPEM(), nil

		case *identity.CertIdentity:
			return p.(*identity.CertIdentity).MspID, p.(*identity.CertIdentity).GetPEM(), nil

		case pmsp.SerializedIdentity:
			return p.(pmsp.SerializedIdentity).Mspid, p.(pmsp.SerializedIdentity).IdBytes, nil

		case msp.SigningIdentity:

			serialized, err := p.(msp.SigningIdentity).Serialize()
			if err != nil {
				return ``, nil, err
			}

			sid := &pmsp.SerializedIdentity{}
			if err = proto.Unmarshal(serialized, sid); err != nil {
				return ``, nil, err
			}
			return sid.Mspid, sid.IdBytes, nil

		case [2]string:
			// array with 2 elements  - mspId and ca cert
			return p.([2]string)[0], []byte(p.([2]string)[1]), nil
		}
	} else if len(txCreator) == 2 {
		return txCreator[0].(string), txCreator[1].([]byte), nil
	}

	return ``, nil, ErrUnknownFromArgsType
}
